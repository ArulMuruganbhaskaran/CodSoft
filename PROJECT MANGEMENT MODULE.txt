npm init -y
npm install express mongoose bcrypt jsonwebtoken cors dotenv

const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');
const authRoutes = require('./routes/auth');
const projectRoutes = require('./routes/projects');

dotenv.config();
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB Connected'))
  .catch(err => console.error(err));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/projects', projectRoutes);

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

const mongoose = require('mongoose');
const userSchema = new mongoose.Schema({
    name: String,
    email: { type: String, unique: true },
    password: String,
    role: { type: String, enum: ['manager', 'team_member'], default: 'team_member' }
});
module.exports = mongoose.model('User', userSchema);


const mongoose = require('mongoose');
const projectSchema = new mongoose.Schema({
    title: String,
    description: String,
    deadline: Date,
    members: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    tasks: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Task' }]
});
module.exports = mongoose.model('Project', projectSchema);


const mongoose = require('mongoose');
const taskSchema = new mongoose.Schema({
    title: String,
    assignedTo: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    status: { type: String, enum: ['pending', 'in_progress', 'completed'], default: 'pending' },
    deadline: Date,
    project: { type: mongoose.Schema.Types.ObjectId, ref: 'Project' }
});
module.exports = mongoose.model('Task', taskSchema);



npx create-react-app project-manager
cd project-manager
npm install axios react-router-dom @mui/material @emotion/react @emotion/styled




import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Dashboard from './pages/Dashboard';
import ProjectDetails from './pages/ProjectDetails';
import Login from './pages/Login';

function App() {
    return (
        <Router>
            <Routes>
                <Route path="/" element={<Dashboard />} />
                <Route path="/project/:id" element={<ProjectDetails />} />
                <Route path="/login" element={<Login />} />
            </Routes>
        </Router>
    );
}

export default App;


import React from 'react';
import { Link } from 'react-router-dom';

const ProjectCard = ({ project }) => {
    return (
        <div className="project-card">
            <h3>{project.title}</h3>
            <p>{project.description}</p>
            <Link to={`/project/${project._id}`}>View Details</Link>
        </div>
    );
};

export default ProjectCard;



import React from 'react';

const TaskCard = ({ task, onUpdateStatus }) => {
    return (
        <div className="task-card">
            <h4>{task.title}</h4>
            <p>Status: {task.status}</p>
            <button onClick={() => onUpdateStatus(task._id, 'in_progress')}>Start</button>
            <button onClick={() => onUpdateStatus(task._id, 'completed')}>Complete</button>
        </div>
    );
};

export default TaskCard;


const express = require('express');
const User = require('../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const router = express.Router();

router.post('/register', async (req, res) => {
    const { name, email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ name, email, password: hashedPassword });
    await newUser.save();
    res.status(201).json(newUser);
});

router.post('/login', async (req, res) => {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(400).json({ message: 'Invalid credentials' });
    }
    const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET);
    res.json({ token });
});

module.exports = router;




const express = require('express');
const Project = require('../models/Project');
const Task = require('../models/Task');
const router = express.Router();

router.get('/', async (req, res) => {
    const projects = await Project.find().populate('members').populate('tasks');
    res.json(projects);
});

router.post('/', async (req, res) => {
    const newProject = new Project(req.body);
    await newProject.save();
    res.status(201).json(newProject);
});

router.put('/:id', async (req, res) => {
    const updatedProject = await Project.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(updatedProject);
});

module.exports = router;
