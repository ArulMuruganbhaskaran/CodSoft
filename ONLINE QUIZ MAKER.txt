npm init -y
npm install express mongoose cors jsonwebtoken bcrypt dotenv



const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const authRoutes = require('./routes/auth');
const quizRoutes = require('./routes/quiz');

dotenv.config();
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB Connection
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB Connected'))
  .catch(err => console.error(err));

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/quiz', quizRoutes);

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));



const mongoose = require('mongoose');
const userSchema = new mongoose.Schema({
    name: String,
    email: { type: String, unique: true },
    password: String
});
module.exports = mongoose.model('User', userSchema);


const mongoose = require('mongoose');
const quizSchema = new mongoose.Schema({
    title: String,
    questions: [
        {
            question: String,
            options: [String],
            correctAnswer: Number
        }
    ],
    createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
});
module.exports = mongoose.model('Quiz', quizSchema);


 const mongoose = require('mongoose');
const submissionSchema = new mongoose.Schema({
    quizId: { type: mongoose.Schema.Types.ObjectId, ref: 'Quiz' },
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    score: Number,
    answers: [Number]
});
module.exports = mongoose.model('QuizSubmission', submissionSchema);



npx create-react-app online-quiz
cd online-quiz
npm install axios react-router-dom @mui/material @emotion/react @emotion/styled



import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import HomePage from './pages/HomePage';
import CreateQuiz from './pages/CreateQuiz';
import QuizList from './pages/QuizList';
import TakeQuiz from './pages/TakeQuiz';
import QuizResults from './pages/QuizResults';

function App() {
    return (
        <Router>
            <Routes>
                <Route path="/" element={<HomePage />} />
                <Route path="/create-quiz" element={<CreateQuiz />} />
                <Route path="/quiz-list" element={<QuizList />} />
                <Route path="/quiz/:id" element={<TakeQuiz />} />
                <Route path="/results/:id" element={<QuizResults />} />
            </Routes>
        </Router>
    );
}

export default App;


import React, { useState } from 'react';

const QuizForm = ({ onSubmit }) => {
    const [title, setTitle] = useState('');
    const [questions, setQuestions] = useState([]);

    const addQuestion = () => {
        setQuestions([...questions, { question: '', options: ['', '', '', ''], correctAnswer: 0 }]);
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        onSubmit({ title, questions });
    };

    return (
        <form onSubmit={handleSubmit}>
            <input 
                type="text" 
                placeholder="Quiz Title" 
                value={title} 
                onChange={(e) => setTitle(e.target.value)} 
            />
            {questions.map((q, index) => (
                <div key={index}>
                    <input 
                        type="text" 
                        placeholder="Question" 
                        value={q.question} 
                        onChange={(e) => {
                            const updatedQuestions = [...questions];
                            updatedQuestions[index].question = e.target.value;
                            setQuestions(updatedQuestions);
                        }} 
                    />
                    {q.options.map((opt, optIndex) => (
                        <input 
                            key={optIndex} 
                            type="text" 
                            placeholder={`Option ${optIndex + 1}`} 
                            value={opt} 
                            onChange={(e) => {
                                const updatedQuestions = [...questions];
                                updatedQuestions[index].options[optIndex] = e.target.value;
                                setQuestions(updatedQuestions);
                            }} 
                        />
                    ))}
                    <select 
                        onChange={(e) => {
                            const updatedQuestions = [...questions];
                            updatedQuestions[index].correctAnswer = parseInt(e.target.value);
                            setQuestions(updatedQuestions);
                        }}
                    >
                        <option value="0">Option 1</option>
                        <option value="1">Option 2</option>
                        <option value="2">Option 3</option>
                        <option value="3">Option 4</option>
                    </select>
                </div>
            ))}
            <button type="button" onClick={addQuestion}>Add Question</button>
            <button type="submit">Submit Quiz</button>
        </form>
    );
};

export default QuizForm;




<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <div>Quiz Question</div>
    <div>Answer Options</div>
</div>
